[36m
╔════════════════════════════════════════════════════════════╗[0m
[1m║         SHELL MODE INTEGRATION TEST SUITE                 ║[0m
[36m╚════════════════════════════════════════════════════════════╝[0m
[36m
============================================================[0m
[1mTest 1: keyToAnsi Utility[0m
[36m============================================================[0m
[2m  Loading keyToAnsi from: /home/alejandro/Swarm/ceregrep-client/tui/utils/keyToAnsi.ts[0m
[36m
============================================================[0m
[1mTest 2: PTY Basic Functionality[0m
[36m============================================================[0m
[32m✓ node-pty module loaded successfully[0m
[2m  Spawning echo command via PTY...[0m
[32m✓ PTY process created: PASSED[0m
[32m✓ PTY process has PID: PASSED[0m
[2m  PTY spawned with PID: 285300[0m
[32m✓ PTY exit code is 0: PASSED[0m
[32m✓ PTY output contains expected text: PASSED[0m
[36m
============================================================[0m
[1mTest 3: PTY Interactive Input (writeToPty)[0m
[36m============================================================[0m
[2m  Spawning interactive bash via PTY...[0m
[2m  Writing "echo test" to PTY...[0m
[2m  Writing "exit" to PTY...[0m
[32m✓ PTY received "echo test" command: PASSED[0m
[32m✓ PTY output contains "test" result: PASSED[0m
[36m
============================================================[0m
[1mTest 4: PTY Scrolling with Headless Terminal[0m
[36m============================================================[0m
[2m  Creating headless terminal...[0m
[32m✓ Headless terminal created[0m
[2m  Writing 20 lines (terminal has 10 rows)...[0m
[32m✓ Lines written to terminal[0m
[32m✓ Terminal buffer exists: PASSED[0m
[2m  Buffer has 10 lines[0m
[2m  Viewport Y: 0[0m
[2m  Base Y: 0[0m
[2m  Testing scroll up...[0m
[2m  Viewport Y after scroll up: 0[0m
[31m✗ Scroll up did not change viewport (may be at top)[0m
[2m  Testing scroll to top...[0m
[32m✓ Scroll to top sets viewportY to 0: PASSED[0m
[2m  Testing scroll to bottom...[0m
[2m  Viewport Y after scroll to bottom: 0[0m
[32m✓ Scroll to bottom executed[0m
[36m
============================================================[0m
[1mTest 5: AnsiOutput Structure and Rendering[0m
[36m============================================================[0m
[32m✓ Sample AnsiOutput structure created[0m
[32m✓ AnsiOutput has 3 lines: PASSED[0m
[32m✓ Line 1 has 1 token: PASSED[0m
[32m✓ Line 2 has 2 tokens: PASSED[0m
[32m✓ First token text is correct: PASSED[0m
[32m✓ First token is not bold: PASSED[0m
[32m✓ First token has default fg color: PASSED[0m
[32m✓ Error token is bold: PASSED[0m
[32m✓ Error token is red: PASSED[0m
[32m✓ AnsiOutput can be serialized to JSON: PASSED[0m
[32m✓ Deserialized output has 3 lines: PASSED[0m
[32m✓ Deserialized text matches: PASSED[0m
[2m  AnsiOutput structure validation complete[0m
[36m
============================================================[0m
[1mTest 6: Terminal Serialization to AnsiOutput[0m
[36m============================================================[0m
[32m✓ Terminal serializer loaded[0m
[2m  Wrote ANSI colored text to terminal[0m
[32m✓ Serialization produced output: PASSED[0m
[32m✓ Output is an array: PASSED[0m
[32m✓ Output has 10 lines (terminal rows): PASSED[0m
[2m  Found 0 non-empty lines[0m
[31m✗ Serialization did not capture expected lines[0m
[31m✗ Serialization did not preserve color/style information[0m
[36m
============================================================[0m
[1mTEST SUMMARY[0m
[36m============================================================[0m
[1mTotal Tests Run: 31[0m
[32m✓ Passed: 28[0m
[31m✗ Failed: 3[0m
[31m
⚠️  3 TEST(S) FAILED ⚠️
[0m
[36m
============================================================[0m
[1mMANUAL TESTING GUIDE FOR TUI[0m
[36m============================================================[0m
[1m
To manually test shell mode in the TUI:
[0m
[33m1. START THE TUI:[0m
[2m     npm run build && node dist/cli/index.js tui[0m
[33m
2. ENTER SHELL MODE:[0m
[2m     Press "t" to open the Terminal Panel[0m
[33m
3. CREATE A TERMINAL:[0m
[2m     Press "n" to create a new terminal[0m
[2m     Enter a command like: bash[0m
[2m     Give it a name like: test-shell[0m
[2m     Press Tab to switch fields, Enter to create[0m
[33m
4. VIEW OUTPUT:[0m
[2m     Select the terminal from the list[0m
[2m     Press Enter to view full output[0m
[33m
5. ENTER INTERACTIVE MODE:[0m
[2m     While viewing a running terminal, press "i"[0m
[2m     Type commands and press Enter to send to PTY[0m
[2m     Try: echo "Hello from interactive mode"[0m
[33m
6. TEST SCROLLING:[0m
[2m     In output view, use Arrow keys to scroll[0m
[2m     Use PageUp/PageDown for faster scrolling[0m
[33m
7. TEST CONTROL SEQUENCES:[0m
[2m     In interactive mode, try:[0m
[2m     - Ctrl+C to send interrupt signal[0m
[2m     - Ctrl+D to send EOF[0m
[2m     - Ctrl+L to send clear screen[0m
[33m
8. TEST WITH INTERACTIVE PROGRAMS:[0m
[2m     Create terminals with these commands:[0m
[2m     - vim (test arrow keys, ESC, etc.)[0m
[2m     - less (test scrolling)[0m
[2m     - htop (test colors and formatting)[0m
[2m     - python (test REPL interaction)[0m
[33m
9. TEST TERMINAL MANAGEMENT:[0m
[2m     - "k" to kill a terminal[0m
[2m     - "e" to toggle expose to agent[0m
[2m     - "c" to clear output[0m
[2m     - "r" to refresh list[0m
[33m
10. EXIT:[0m
[2m      Press ESC to go back through views[0m
[2m      Press ESC in list view to exit terminal panel[0m
[2m
────────────────────────────────────────────────────────────[0m
[1mEND OF TEST SUITE[0m
[2m────────────────────────────────────────────────────────────
[0m
